//
//  VKWebViewOperationCenter.m
//  vKan
//
//  Created by kinsun on 2017/11/21.
//  Copyright © 2017年 FengCaiRuiYuan. All rights reserved.
//

@interface _VKWebViewAlertItemModel : GOModel

@property (nonatomic, copy) NSString *title;
@property (nonatomic, copy) NSString *JSMethodName;

@end

@implementation _VKWebViewAlertItemModel @end

@interface _VKWebViewAlertModel : GOModel

@property (nonatomic, copy) NSString *title;
@property (nonatomic, copy) NSString *subtitle;
@property (nonatomic, strong) NSMutableArray <_VKWebViewAlertItemModel*>*items;

@end

@implementation _VKWebViewAlertModel

+(NSDictionary *)objectClassInArray {
    return @{@"items" : [_VKWebViewAlertItemModel class]};
}

@end

#import "VKWebView.h"

@interface _VKWebViewOperationModel : GOModel

@property (nonatomic, copy) NSNumber *type;
@property (nonatomic, copy) NSString *parameter;
@property (nonatomic, copy) NSString *callBackJSMethod;
@property (nonatomic, weak) VKBaseViewController *controller;
@property (nonatomic, weak) VKWebView *webView;

@end

@implementation _VKWebViewOperationModel @end

#import "VKWebViewOperationCenter.h"

#import "VKPayListSheetView.h"
#import "VKJumpCenter.h"
#import "GOAdModel.h"
#import "KSTakePictureController.h"
#import "VKUserLoginController.h"
#import "TTImageViewerController.h"
#import "GOWenZhangCommentViewController.h"
#import "TTFotoSayDetailController.h"
#import "TTMallViewController.h"
#import "VKInviteViewController.h"

@implementation VKWebViewOperationCenter

+(void)webViewOperationWithController:(VKBaseViewController*)controller message:(WKScriptMessage*)message {
    if (message && controller) {
        NSString *body = message.body;
        NSDictionary *dict = [body JSONValue];
        _VKWebViewOperationModel *model = [_VKWebViewOperationModel objectWithKeyValues:dict];
        if (model) {
            model.controller = controller;
            model.webView = (VKWebView*)message.webView;
            NSInteger type = model.type.integerValue;
            switch (type) {
                case 1:
                    [self controllerNavigationBarHideWithModel:model isLeftBotton:YES];
                    break;
                case 2:
                    [self controllerNavigationBarHideWithModel:model isLeftBotton:NO];
                    break;
                case 3:
                    [self showPaySheetWithModel:model];
                    break;
                case 4:
                    [self showShareSheetWithModel:model];
                    break;
                case 5:
                    [self openADJumpCenterWithModel:model];
                    break;
                case 6:
                    [self openURLWithModel:model];
                    break;
                case 7:
                    [self openImagePickerWithModel:model];
                    break;
                case 8:
                    [self openLoginWithModel:model];
                    break;
                case 9:
                    [self showBigImageWithModel:model];
                    break;
                case 10:
                    [VKGlobalUser refreshAllUserData];
                    break;
                case 11:
                    [self userLogoutWithModel:model];
                    break;
                case 12:
                    [self checkLoginStatusWithModel:model];
                    break;
                case 13:
                    [self showAlertWithModel:model];
                    break;
                case 14:
                    [self openCommentWithModel:model];
                    break;
                case 15:
                    [self hiddenNavigationViewLineWithModel:model];
                    break;
                case 16:
                    [self showPotosayWithModel:model];
                    break;
                case 17:
                    [controller GOleftNavButtonClicked:nil];
                    break;
                case 18:
                    [self showMallViewControllerWithModel:model];
                    break;
                case 19:
                    [self showInviteViewControllerWithModel:model];
                    break;
            }
        }
    }
}

+(void)controllerNavigationBarHideWithModel:(_VKWebViewOperationModel*)model isLeftBotton:(BOOL)isLeftBotton {
    BOOL isHide = model.parameter.boolValue;
    VKBaseViewController *controller = model.controller;
    VKNavigationView *navBar = controller.navigationView;
    if (isLeftBotton) {
        navBar.leftBtn.hidden = isHide;
        [controller setPopEnabled:!isHide];
    } else {
        navBar.rightBtn.hidden = isHide;
    }
}

+(void)showPaySheetWithModel:(_VKWebViewOperationModel*)model {
    NSString *parameter = model.parameter;
    if (parameter.length) {
        NSDictionary *param = [NSDictionary dictionaryWithObject:parameter forKey:@"param"];
        VKBaseViewController *controller = model.controller;
        VKBaseView *view = controller.view;
        VKPayListSheetView *sheetView = [[VKPayListSheetView alloc]initWithFrame:view.bounds];
        sheetView.parameter = param;
        sheetView.superController = controller;
        NSString *callBackJSMethod = model.callBackJSMethod;
        if (callBackJSMethod.length) {
            __weak VKWebView *weakWebView = model.webView;
            [sheetView setPaySuccessCallBack:^{
                [weakWebView evaluateJavaScriptMethod:callBackJSMethod completionHandler:nil];
            }];
        }
        [view addSubviewAtTheTop:sheetView];
        [sheetView showView];
    }
}

+(void)showShareSheetWithModel:(_VKWebViewOperationModel*)model {
    NSString *parameter = model.parameter;
    if (parameter.length) {
        NSDictionary *dict = [parameter JSONValue];
        GOShare *share = [GOShare objectWithKeyValues:dict];
        if (share) {
            VKBaseView *view = model.controller.view;
            GOShareView *shareView = [[GOShareView alloc] initWithFrame:view.bounds model:share];
            [view addSubviewAtTheTop:shareView];
            [shareView openShareview];
        }
    }
}

+(void)openADJumpCenterWithModel:(_VKWebViewOperationModel*)model {
    NSString *parameter = model.parameter;
    if (parameter.length) {
        NSDictionary *dict = [parameter JSONValue];
        GOAdModel *ADmodel = [GOAdModel objectWithKeyValues:dict];
        [VKJumpCenter ADJumpFromViewController:model.controller adModel:ADmodel];
    }
}

+(void)openURLWithModel:(_VKWebViewOperationModel*)model {
    NSString *urlString = model.parameter;
    if (urlString.length) {
        UIApplication *application = [UIApplication sharedApplication];
        NSURL *url = [NSURL URLWithString:urlString];
        if ([application canOpenURL:url]) {
            [application openURL:url];
        }
    }
}

+(void)openImagePickerWithModel:(_VKWebViewOperationModel*)model {
    VKBaseViewController *controller = model.controller;
    __weak VKWebView *weakWebView = model.webView;
    NSString *callBackJSMethod = model.callBackJSMethod;
    UIAlertController *alert = [KSTakePictureController actionSheetFromTakePictureWithController:controller finishCallBack:^(UIImage *image) {
        [VKGlobal uploadingImage:image callBack:^(GOPicture *img_info, BOOL isError) {
            if (callBackJSMethod.length) {
                NSString *js = [NSString stringWithFormat:@"%@','%@", callBackJSMethod, img_info.file_id];
                [weakWebView evaluateJavaScriptMethod:js completionHandler:nil];
            }
        }];
    }];
    [controller presentViewController:alert animated:YES completion:nil];
}

+(void)openLoginWithModel:(_VKWebViewOperationModel*)model {
    if (![VKGlobalUser user].userIsLogin) {
        VKUserLoginController *login = [[VKUserLoginController alloc]init];
        NSString *callBackJSMethod = model.callBackJSMethod;
        if (callBackJSMethod.length) {
            __weak VKWebView *weakWebView = model.webView;
            [login setLoginSuccess:^{
                [weakWebView evaluateJavaScriptMethod:callBackJSMethod completionHandler:nil];
            }];
        }
        [model.controller GOpresentViewController:login];
    }
}

+(void)showBigImageWithModel:(_VKWebViewOperationModel*)model {
    VKBaseViewController *controller = model.controller;
    VKWebView *webView = model.webView;
    [webView webViewBeginScreenshot];
    UIImage *image = [VKGlobal screenshotForView:controller.view];
    [webView webViewEndScreenshot];
    
    TTImageViewerController *imageViewer = [[TTImageViewerController alloc]init];
    imageViewer.backgroundImage = image;
    [imageViewer setJsonParams:model.parameter style:TTImageViewerControllerStyleBigImage];
    [controller GOpresentViewController:imageViewer];
}

+(void)showPotosayWithModel:(_VKWebViewOperationModel*)model {
    TTFotoSayDetailModel *detailModel = [TTFotoSayDetailModel objectWithKeyValues:model.parameter];
    VKBaseViewController *controller = model.controller;
    VKWebView *webView = model.webView;
    [webView webViewBeginScreenshot];
    UIImage *image = [VKGlobal screenshotForView:controller.view];
    [webView webViewEndScreenshot];
    
    TTFotoSayDetailController *imageViewer = [[TTFotoSayDetailController alloc]init];
    imageViewer.style = TTFotoSayDetailStyleAlbumDetail;
    imageViewer.tintColor = COLORA(vkgc_Gray6, 0.4f);
    imageViewer.backgroundImage = image;
    imageViewer.detailModel = detailModel;
    [controller GOpresentViewController:imageViewer];
}

+(void)userLogoutWithModel:(_VKWebViewOperationModel*)model {
    if ([VKGlobalUser user].userIsLogin) {
        __weak VKWebView *weakWebView = model.webView;
        NSString *callBackJSMethod = model.callBackJSMethod;
        [VKGlobalUser userLogoutWithSuccessCallBack:^{
            if (callBackJSMethod.length) {
                [weakWebView evaluateJavaScriptMethod:callBackJSMethod completionHandler:nil];
            }
        } controller:nil];
    }
}

+(void)checkLoginStatusWithModel:(_VKWebViewOperationModel*)model {
    NSString *callBackJSMethod = model.callBackJSMethod;
    if (callBackJSMethod.length) {
        BOOL isLogin = [VKGlobalUser user].userIsLogin;
        NSString *js = [NSString stringWithFormat:@"%@','%d", callBackJSMethod, isLogin];
        [model.webView evaluateJavaScriptMethod:js completionHandler:nil];
    }
}

+(void)showAlertWithModel:(_VKWebViewOperationModel*)model {
    NSString *parameter = model.parameter;
    if (parameter.length) {
        NSDictionary *dict = [parameter JSONValue];
        _VKWebViewAlertModel *alertModel = [_VKWebViewAlertModel objectWithKeyValues:dict];
        UIAlertController *alert = [UIAlertController alertControllerWithTitle:alertModel.title message:alertModel.subtitle preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction *cancel = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil];
        [alert addAction:cancel];
        __weak VKWebView *weakView = model.webView;
        for (_VKWebViewAlertItemModel *item in alertModel.items) {
            UIAlertAction *action = [UIAlertAction actionWithTitle:item.title style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
                [weakView evaluateJavaScriptMethod:item.JSMethodName completionHandler:nil];
            }];
            [alert addAction:action];
        }
        [model.controller presentViewController:alert animated:YES completion:nil];
    }
}

+(void)openCommentWithModel:(_VKWebViewOperationModel*)model {
    NSString *parameter = model.parameter;
    if (parameter.length) {
        GOWenZhangCommentViewController *comment = [[GOWenZhangCommentViewController alloc]init];
        comment.jsonParams = parameter;
        NSString *callBackJSMethod = model.callBackJSMethod;
        if (callBackJSMethod.length) {
            __weak VKWebView *weakView = model.webView;
            [comment setUpdateCommentCountCallBack:^(NSInteger commentCount) {
                NSString *js = [NSString stringWithFormat:@"%@','%zd", callBackJSMethod, commentCount];
                [weakView evaluateJavaScriptMethod:js completionHandler:nil];
            }];
        }
        [model.controller GOpushViewController:comment];
    }
}

+(void)hiddenNavigationViewLineWithModel:(_VKWebViewOperationModel*)model {
    NSString *parameter = model.parameter;
    if (parameter.length) {
        model.controller.navigationView.line.hidden = parameter.boolValue;
    }
}

+(void)showMallViewControllerWithModel:(_VKWebViewOperationModel*)model {
    NSString *url = model.parameter;
    if (url.length) {
        TTMallViewController *mall = [[TTMallViewController alloc]init];
        mall.url = url;
        [model.controller GOpushViewController:mall];
    }
}

+(void)showInviteViewControllerWithModel:(_VKWebViewOperationModel*)model {
    NSString *json = model.parameter;
    if (json.length) {
        VKInviteViewController *invite = [[VKInviteViewController alloc]init];
        invite.json = json;
        __weak VKWebView *weakView = model.webView;
        NSString *callBackJSMethod = model.callBackJSMethod;
        if (callBackJSMethod.length) {
            [invite setDoneTextChangeCallBack:^(NSString *text) {
                NSString *js = [NSString stringWithFormat:@"%@','%@", callBackJSMethod, text];
                [weakView evaluateJavaScriptMethod:js completionHandler:nil];
            }];
        }
        [model.controller GOpushViewController:invite];
        
    }
}

@end
