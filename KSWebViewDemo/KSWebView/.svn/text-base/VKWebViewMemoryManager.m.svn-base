//
//  VKWebViewMemoryManager.m
//  vKan
//
//  Created by kinsun on 2018/1/18.
//  Copyright © 2018年 FengCaiRuiYuan. All rights reserved.
//

#import "VKWebView.h"

@interface _VKWebViewMemoryManagerItem : NSObject

@property (nonatomic, assign, readonly) NSTimeInterval timeInterval;
@property (nonatomic, strong, readonly) VKWebView *webView;

@end

@implementation _VKWebViewMemoryManagerItem

+(instancetype)itemWithTimeInterval:(NSTimeInterval)timeInterval webView:(VKWebView*)webView {
    _VKWebViewMemoryManagerItem *item = [[self alloc]init];
    item->_timeInterval = timeInterval;
    item->_webView = webView;
    return item;
}

@end

#import "VKWebViewMemoryManager.h"

@interface VKWebViewMemoryManager () {
    NSTimer *_timer;
}

@property (nonatomic, strong) NSMutableArray <_VKWebViewMemoryManagerItem*>*webViewPool;
@property (nonatomic, readonly, class) dispatch_queue_t queue;

@end

@implementation VKWebViewMemoryManager

static VKWebViewMemoryManager *_instance;
+(instancetype)shareInstance {
    if (_instance == nil) {
        _instance = [[self alloc]init];
    }
    return _instance;
}

+(void)addWebView:(VKWebView*)webView {
    if (webView) {
        VKWebViewMemoryManager *mgr = [self shareInstance];
        NSLog(@"webView:\"%@\"被创建,并且加入webViewPool",webView);
        NSTimeInterval nowTime = [NSDate date].timeIntervalSince1970;
        _VKWebViewMemoryManagerItem *item = [_VKWebViewMemoryManagerItem itemWithTimeInterval:nowTime webView:webView];
        [mgr.webViewPool addObject:item];
        NSLog(@"webViewPool中已有%zd个对象",mgr.webViewPool.count);
        [mgr startChecking];
    }
}

-(void)startChecking {
    if (!_timer) {
        NSTimer *timer = [NSTimer timerWithTimeInterval:60.f target:self selector:@selector(checkReleaseInWebViewPool) userInfo:nil repeats:YES];
        NSRunLoop *runLoop = [NSRunLoop mainRunLoop];
        [runLoop addTimer:timer forMode:NSRunLoopCommonModes];
        _timer = timer;
    }
}

-(void)stopChecking {
    if (_timer) {
        [_timer invalidate];
        _timer = nil;
    }
}

-(void)checkReleaseInWebViewPool {
    dispatch_async(VKWebViewMemoryManager.queue, ^{
        NSMutableArray <_VKWebViewMemoryManagerItem*>*webViewPool = self.webViewPool;
        NSLog(@"正在检查webViewPool,现有%zd个对象在池中",webViewPool.count);
        NSMutableArray <_VKWebViewMemoryManagerItem*>*releasePool = [NSMutableArray array];
        NSTimeInterval nowTime = [NSDate date].timeIntervalSince1970;
        for (_VKWebViewMemoryManagerItem *item in webViewPool.mutableCopy) {
            NSTimeInterval itemTime = item.timeInterval;
            if (nowTime - itemTime > 10.f) {
                VKWebView *webView = item.webView;//模型内一个引用,现在这个指针一个引用所以是2
                NSUInteger count = [[webView valueForKey:@"retainCount"] unsignedIntegerValue];
                if (count <= 2 && !webView.isLoading) {
                    [releasePool addObject:item];
                }
            }
        }
        if (releasePool.count) {
            NSLog(@"检查有%zd个webView没有引用正在释放...",releasePool.count);
            [webViewPool removeObjectsInArray:releasePool];
        }
        if (!webViewPool.count) {
            [self stopChecking];
        }
    });
}

-(NSMutableArray<_VKWebViewMemoryManagerItem *> *)webViewPool {
    if (!_webViewPool) {
        _webViewPool = [NSMutableArray array];
    }
    return _webViewPool;
}

+(dispatch_queue_t)queue {
    return dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
}

@end
